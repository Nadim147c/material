package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"slices"
)

// usage: go run gen_enum_alias.go ./path/to/pkg/dynamic
func main() {
	dynPath := "./dynamic"

	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, dynPath, nil, parser.ParseComments)
	if err != nil {
		log.Fatal(err)
	}

	// assume only one package in the directory
	var name string
	for n := range pkgs {
		name = n
		break
	}

	if name == "" {
		log.Fatalf("no Go package found in %s", dynPath)
	}

	pkg := pkgs[name]

	type ConstInfo struct {
		Name    string
		Comment string
	}
	var consts []ConstInfo

	wanted := []string{"Version", "Variant", "Platform"}

	// collect const names and comments
	for _, f := range pkg.Files {
		for _, decl := range f.Decls {
			gen, ok := decl.(*ast.GenDecl)
			if !ok || gen.Tok != token.CONST || !gen.Lparen.IsValid() {
				continue
			}

			for _, spec := range gen.Specs {
				val := spec.(*ast.ValueSpec)
				if !slices.Contains(wanted, fmt.Sprint(val.Type)) {
					continue
				}

				for _, name := range val.Names {
					comment := ""

					// Prefer doc comment group
					if val.Doc != nil {
						for _, c := range val.Doc.List {
							comment += c.Text + "\n"
						}
					} else if gen.Doc != nil {
						// If no ValueSpec doc, maybe GenDecl doc applies
						for _, c := range gen.Doc.List {
							comment += c.Text + "\n"
						}
					}

					consts = append(
						consts,
						ConstInfo{Name: name.Name, Comment: comment},
					)
				}
			}
		}
	}

	if len(consts) == 0 {
		log.Fatalf("no const found in %s", dynPath)
	}

	parentDir := filepath.Dir(dynPath)

	var buf bytes.Buffer
	fmt.Fprint(&buf, `
// Code generated by ./scirpts/enum_alias.go DO NOT EDIT.

package material

import "github.com/Nadim147c/material/v2/dynamic"

const (
`)

	for _, c := range consts {
		if c.Comment != "" {
			buf.WriteString("\t" + c.Comment)
			if c.Comment[len(c.Comment)-1] != '\n' {
				buf.WriteByte('\n')
			}
		}
		fmt.Fprintf(&buf, "\t%s = dynamic.%s\n", c.Name, c.Name)
	}

	fmt.Fprintln(&buf, ")")

	outFile := filepath.Join(parentDir, "enum_generated_alias.go")
	if err := os.WriteFile(outFile, buf.Bytes(), 0o644); err != nil {
		log.Fatal(err)
	}

	fmt.Println("âœ… Generated:", outFile)
}
