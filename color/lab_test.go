package color

import "testing"

func TestYFromLstar_GivenValues(t *testing.T) {
	cases := []struct {
		name      string
		lstar     float64
		luminance float64
	}{
		{"L*=0.0", 0.0, 0.0},
		{"L*=0.1", 0.1, 0.0110705},
		{"L*=0.2", 0.2, 0.0221411},
		{"L*=0.3", 0.3, 0.0332116},
		{"L*=0.4", 0.4, 0.0442822},
		{"L*=0.5", 0.5, 0.0553528},
		{"L*=1.0", 1.0, 0.1107056},
		{"L*=2.0", 2.0, 0.2214112},
		{"L*=3.0", 3.0, 0.3321169},
		{"L*=4.0", 4.0, 0.4428225},
		{"L*=5.0", 5.0, 0.5535282},
		{"L*=8.0", 8.0, 0.8856451},
		{"L*=10.0", 10.0, 1.1260199},
		{"L*=15.0", 15.0, 1.9085832},
		{"L*=20.0", 20.0, 2.9890524},
		{"L*=25.0", 25.0, 4.4154767},
		{"L*=30.0", 30.0, 6.2359055},
		{"L*=40.0", 40.0, 11.2509737},
		{"L*=50.0", 50.0, 18.4186518},
		{"L*=60.0", 60.0, 28.1233342},
		{"L*=70.0", 70.0, 40.7494157},
		{"L*=80.0", 80.0, 56.6812907},
		{"L*=90.0", 90.0, 76.3033539},
		{"L*=95.0", 95.0, 87.6183294},
		{"L*=99.0", 99.0, 97.4360239},
		{"L*=100.0", 100.0, 100.0},
	}

	for _, tt := range cases {
		t.Run(tt.name, func(t *testing.T) {
			actual := YFromLstar(tt.lstar)
			if !almostEqual(actual, tt.luminance) {
				t.Errorf(
					"YFromLstar(%v) = %v; want %v",
					tt.lstar,
					actual,
					tt.luminance,
				)
			}
		})
	}
}

func TestLstarFromY_GivenValues(t *testing.T) {
	cases := []struct {
		name      string
		luminance float64
		lstar     float64
	}{
		{"Y=0.0", 0.0, 0.0},
		{"Y=0.1", 0.1, 0.9032962},
		{"Y=0.2", 0.2, 1.8065925},
		{"Y=0.3", 0.3, 2.7098888},
		{"Y=0.4", 0.4, 3.6131851},
		{"Y=0.5", 0.5, 4.5164814},
		{"Y=0.8856451", 0.8856451, 8.0},
		{"Y=1.0", 1.0, 8.9914424},
		{"Y=2.0", 2.0, 15.4872443},
		{"Y=3.0", 3.0, 20.0438970},
		{"Y=4.0", 4.0, 23.6714419},
		{"Y=5.0", 5.0, 26.7347653},
		{"Y=10.0", 10.0, 37.8424304},
		{"Y=15.0", 15.0, 45.6341970},
		{"Y=20.0", 20.0, 51.8372115},
		{"Y=25.0", 25.0, 57.0754208},
		{"Y=30.0", 30.0, 61.6542222},
		{"Y=40.0", 40.0, 69.4695307},
		{"Y=50.0", 50.0, 76.0692610},
		{"Y=60.0", 60.0, 81.8381891},
		{"Y=70.0", 70.0, 86.9968642},
		{"Y=80.0", 80.0, 91.6848609},
		{"Y=90.0", 90.0, 95.9967686},
		{"Y=95.0", 95.0, 98.0335184},
		{"Y=99.0", 99.0, 99.6120372},
		{"Y=100.0", 100.0, 100.0},
	}

	for _, tt := range cases {
		t.Run(tt.name, func(t *testing.T) {
			actual := LstarFromY(tt.luminance)
			if !almostEqual(actual, tt.lstar) {
				t.Errorf(
					"LstarFromY(%v) = %v; want %v",
					tt.luminance,
					actual,
					tt.lstar,
				)
			}
		})
	}
}
